const mongod_log = require("./mongodLog.model");
const XLSX = require("xlsx");
const fs = require("fs");
const path = require("path");
const FormData = require("form-data");
const axios = require("axios");
const https = require("https");
const mongoose = require("mongoose");
const readline = require("readline");

const {
  createPipelineMsgCounts,
  createPipelineNsCounts,
  createPipelineStatistics,
  createPipelineResults,
  createPipelineResultsTotal,
} = require("./mognodLog.pipeline");

const finData = async (req) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    const { commandTypes, ns, s, c, ctx, msg } = req.query;
    const filter = {
      ...(commandTypes && { "attr.type": commandTypes }),
      ...(ns && { "attr.ns": ns }),
      ...(s && { s: s }),
      ...(c && { c: c }),
      ...(ctx && { ctx: ctx }),
      ...(msg && { msg: msg }),
    };

    // L·∫•y d·ªØ li·ªáu theo filter
    const data = await mongod_log
      .find(filter, "_id")
      .skip(skip)
      .limit(limit)
      .exec();

    if (data.length > 0) {
      return {
        status: true,
        data: data || [],
      };
    }
    return { message: "No data found" };
  } catch (error) {
    console.error("Error in finData:", error);
    return { status: false, error: error.message };
  }
};
/**
 * H√†m t√≠nh to√°n t·ªïng s·ªë l∆∞·ª£ng b·∫£n ghi v√† ph·∫ßn trƒÉm t·ª´ c√°c ƒëi·ªÅu ki·ªán l·ªçc trong log.
 *
 * @param {Object} msgNsPercentages - ƒê·ªëi t∆∞·ª£ng ch·ª©a c√°c t·ªâ l·ªá ph·∫ßn trƒÉm theo message v√† namespace.
 * @returns {Object} - ƒê·ªëi t∆∞·ª£ng ch·ª©a k·∫øt qu·∫£ t·ªïng h·ª£p v·ªõi th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng v√† ph·∫ßn trƒÉm c·ªßa c√°c tr∆∞·ªùng l·ªçc.
 */
const resultsTotal = async (msgNsPercentages) => {
  try {
    // ƒê·∫øm t·ªïng s·ªë b·∫£n ghi trong b·ªô s∆∞u t·∫≠p mongodLog
    const totalRecords = await mongod_log.countDocuments({
      msg: "Slow query",
    });
    // console.log("üöÄ ~ resultsTotal ~ totalRecords:", totalRecords);
    const totalResult = {}; // ƒê·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u tr·ªØ k·∫øt qu·∫£ t·ªïng h·ª£p

    // Duy·ªát qua t·ª´ng namespace trong msgNsPercentages
    for (const ns in msgNsPercentages.nsPercentages) {
      totalResult[ns] = {}; // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng cho t·ª´ng namespace
      // T·∫°o pipeline cho vi·ªác truy v·∫•n
      const pipeline = createPipelineResultsTotal("Slow query", ns);
      // Th·ª±c hi·ªán truy v·∫•n aggregate theo pipeline
      const results = await mongod_log.aggregate(pipeline);
      // console.log("üöÄ ~ resultsTotal ~ results:", JSON.stringify(results));
      // L·∫•y k·∫øt qu·∫£ ƒë·∫ßu ti√™n n·∫øu c√≥, n·∫øu kh√¥ng th√¨ kh·ªüi t·∫°o gi√° tr·ªã m·∫∑c ƒë·ªãnh
      const response =
        results.length > 0 ? results[0] : { totalRecords: 0, filterFields: {} };
      const formattedResult = []; // M·∫£ng ƒë·ªÉ l∆∞u tr·ªØ k·∫øt qu·∫£ ƒë√£ ƒë·ªãnh d·∫°ng

      // H√†m ƒë·ªÉ t√≠nh ph·∫ßn trƒÉm tr√™n t·ªïng s·ªë b·∫£n ghi
      const percentageOnTotalRecords = (count) =>
        ((count / totalRecords) * 100).toFixed(6);

      // Ki·ªÉm tra n·∫øu filterFields t·ªìn t·∫°i v√† l√† m·ªôt ƒë·ªëi t∆∞·ª£ng
      if (response.filterFields && typeof response.filterFields === "object") {
        // Duy·ªát qua t·ª´ng tr∆∞·ªùng trong filterFields
        for (const [key, value] of Object.entries(response.filterFields)) {
          if (value !== undefined && value !== null) {
            // ƒê·ªãnh d·∫°ng chi ti·∫øt cho tr∆∞·ªùng l·ªçc
            const detailedFilter = formatFilterField(key, value);

            if (detailedFilter) {
              // ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ theo y√™u c·∫ßu
              formattedResult.push({
                attr: `${key} : ${percentageOnTotalRecords(value.count)}%`, // T·∫°o chu·ªói hi·ªÉn th·ªã ph·∫ßn trƒÉm
                value, // D·ªØ li·ªáu trong $or ho·∫∑c $and
              });
            }
          }
        }
      }

      // N·∫øu c√≥ k·∫øt qu·∫£ ƒë√£ ƒë·ªãnh d·∫°ng, l∆∞u v√†o totalResult
      if (formattedResult.length > 0) {
        totalResult[ns]["Slow query"] = formattedResult;
      }
    }

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ªïng h·ª£p
    return totalResult;
  } catch (error) {
    // X·ª≠ l√Ω l·ªói v√† tr·∫£ v·ªÅ th√¥ng b√°o l·ªói
    console.error("Error in resultsTotal:", error);
    return { status: false, error: error.message };
  }
};

// H√†m ƒë·ªÉ duy·ªát qua t·∫•t c·∫£ c√°c tr∆∞·ªùng v√† ph·∫ßn t·ª≠ c·ªßa $and, $or v√† hi·ªÉn th·ªã to√†n b·ªô
const formatFilterField = (key, value) => {
  if (value === undefined || value === null) {
    return null; // B·ªè qua n·∫øu gi√° tr·ªã kh√¥ng h·ª£p l·ªá
  }

  if (typeof value === "object" && value !== null) {
    // Ki·ªÉm tra v√† x·ª≠ l√Ω c√°c ƒëi·ªÅu ki·ªán $and v√† $or
    if (value.$and) {
      return `$and: [${value.$and
        .map((condition) =>
          formatFilterField(
            Object.keys(condition)[0],
            condition[Object.keys(condition)[0]]
          )
        )
        .join(", ")}]`;
    } else if (value.$or) {
      return `$or: [${value.$or
        .map((condition) =>
          formatFilterField(
            Object.keys(condition)[0],
            condition[Object.keys(condition)[0]]
          )
        )
        .join(", ")}]`;
    } else {
      // N·∫øu l√† m·ªôt tr∆∞·ªùng th√¥ng th∆∞·ªùng
      return `${key}: ${JSON.stringify(value)}`;
    }
  } else {
    // N·∫øu gi√° tr·ªã l√† ƒë∆°n gi·∫£n (string, number, v.v.)
    return `${key}: ${value}`;
  }
};

const resultsQuery = async (req) => {
  try {
    const { ns, msg } = req.query;

    const results = await mongod_log.aggregate(createPipelineResults(msg, ns));
    const count = await mongod_log.countDocuments();

    const response =
      results.length > 0
        ? results[0]
        : { totalCodes: 0, totalRecords: 0, percentage: 0 };

    const percentageOnTotalRecords = (response.totalCodes / count) * 100;

    return {
      msg: `k·∫øt qu·∫£ c·ªßa ${msg} t·ª´ ${ns} c√≥ filter.code l√† : ${
        response.totalCodes
      } chi·∫øn: ${percentageOnTotalRecords.toFixed(
        2
      )}% trong t·ªïng s·ªë ${count} b·∫£n ghi`,
      // results_response: response,
      percentageOnTotalRecords: {
        formattedTotalRecords_vi: `${percentageOnTotalRecords.toFixed(2)} %`,
        totalRecordsPercentage: percentageOnTotalRecords,
        totalCodes: response.totalCodes,
        totalRecords: count,
      },
    };
  } catch (error) {
    console.error("Error in finData:", error);
    return { status: false, error: error.message };
  }
};
const msgNsPercentages = async (req) => {
  try {
    // l·∫•y t·ªïng s·ªë b·∫£n ghi
    const totalRecords = await mongod_log.countDocuments();
    //  l·∫•y d·ªØ li·ªáu msg ns theo pipeline
    // const [msgCounts, nsCounts] = await Promise.all([
    //   mongod_log
    //     .aggregate(createPipelineMsgCounts(totalRecords))
    //     .allowDiskUse(true)
    //     .exec(),
    //   mongod_log
    //     .aggregate(createPipelineNsCounts(totalRecords))
    //     .allowDiskUse(true)
    //     .exec(),
    // ]);
    const msgCounts = await mongod_log
      .aggregate(createPipelineMsgCounts(totalRecords))
      .allowDiskUse(true)
      .exec();
    // console.log("üöÄ ~ ok2");

    async function getNsCountsInBatches(batchSize) {
      let nsCounts = []; // L∆∞u tr·ªØ k·∫øt qu·∫£ cu·ªëi c√πng
      let skip = 0; // S·ªë b·∫£n ghi ƒë√£ x·ª≠ l√Ω

      while (true) {
        // T·∫°o pipeline v·ªõi limit v√† skip ƒë·ªÉ l·∫•y t·ª´ng batch
        const pipeline = [
          { $skip: skip },
          { $limit: batchSize },
          ...createPipelineNsCounts(totalRecords), // √Åp d·ª•ng pipeline ƒë√£ ƒë·ªãnh nghƒ©a
        ];

        // Th·ª±c hi·ªán aggregation v·ªõi allowDiskUse: true
        const batchResults = await mongod_log
          .aggregate(pipeline)
          .allowDiskUse(true)
          .exec();

        // N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ trong batch, nghƒ©a l√† ƒë√£ l·∫•y h·∫øt d·ªØ li·ªáu
        if (batchResults.length === 0) break;

        // console.log(`üöÄ ~ ok3. ${Date.now()}`);
        // K·∫øt h·ª£p batchResults v√†o nsCounts
        batchResults.forEach((batchItem) => {
          const existingItem = nsCounts.find(
            (item) => item.ns === batchItem.ns
          );
          if (existingItem) {
            // C·ªông d·ªìn c√°c tr∆∞·ªùng count v√† codes cho c√°c k·∫øt qu·∫£ tr√πng `ns`
            existingItem.count += batchItem.count;
            existingItem.codes.push(...batchItem.codes);
          } else {
            // Th√™m b·∫£n ghi m·ªõi v√†o nsCounts n·∫øu kh√¥ng c√≥ `ns` tr√πng
            nsCounts.push(batchItem);
          }
        });

        // TƒÉng skip ƒë·ªÉ l·∫•y batch ti·∫øp theo
        skip += batchSize;
      }

      // X·ª≠ l√Ω ph·∫ßn trƒÉm `percentage` sau khi k·∫øt th√∫c v√≤ng l·∫∑p
      nsCounts = nsCounts.map((item) => ({
        ...item,
        percentage: (item.count / totalRecords) * 100,
      }));

      return nsCounts;
    }

    const nsCounts = await getNsCountsInBatches(10000);

    // console.log("üöÄ ~ xong");

    const nsPercentages = nsCounts.reduce((acc, item) => {
      const percentage = item.percentage.toFixed(2);
      let codeInfo = "";

      if (item.codes.length > 0) {
        codeInfo = `codes: ${item.codes.length}`;
      } else {
        codeInfo = "codes: 0";
      }
      acc[item.ns] = `${percentage}% , ${codeInfo}`;
      return acc;
    }, {});

    const msgPercentages = msgCounts.reduce((acc, item) => {
      acc[`${item.msg}`] = `${item.percentage.toFixed(2)}%`;
      return acc;
    }, {});

    return {
      msgPercentages,
      nsPercentages,
    };
  } catch (error) {
    console.error("Error in finData:", error);
    return { status: false, error: error.message };
  }
};
const statistics = async (req) => {
  try {
    // L·∫•y th√¥ng tin v·ªÅ c√°c lo·∫°i l·ªánh v√† collection duy nh·∫•t
    const uniqueInfo = await mongod_log
      .aggregate(createPipelineStatistics())
      .exec();

    // ƒê·∫øm s·ªë l∆∞·ª£ng b·∫£n ghi cho commandTypes
    const commanTypes = await mongod_log.countDocuments({
      "attr.type": req.query.commandTypes || 0,
    });

    return {
      statistics: {
        ...uniqueInfo[0],
        commanTypes,
      },
    };
  } catch (error) {
    console.error("Error in finData:", error);
    return { status: false, error: error.message };
  }
};

// H√†m t·∫°o m√¥ t·∫£ m·ªõi t·ª´ th√¥ng tin b·∫£ng v√† tr∆∞·ªùng t√¨m ki·∫øm
const generateDescription = (table, field) => {
  return `t√¨m ki·∫øm '${table}' theo '${field}'`;
};

const writeToExcel = async (resultsTotal) => {
  // T·∫°o m·ªôt workbook m·ªõi
  const wb = XLSX.utils.book_new();

  // T·∫°o d·ªØ li·ªáu cho worksheet
  const wsData = [["B·∫£ng", "C√¢u truy v·∫•n", "T·ªâ l·ªá %", "M√¥ t·∫£"]];

  // T·∫°o m·ªôt m·∫£ng t·∫°m th·ªùi ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu c·∫ßn s·∫Øp x·∫øp
  const tempData = [];

  // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ resultsTotal v√†o ƒë·ªãnh d·∫°ng mong mu·ªën
  for (const [table, queries] of Object.entries(resultsTotal)) {
    for (const [queryType, attributes] of Object.entries(queries)) {
      attributes.forEach((attr) => {
        const attrParts = attr.attr.split(":");
        const field = attrParts[0].split(".").pop().trim(); // L·∫•y tr∆∞·ªùng t√¨m ki·∫øm, v√≠ d·ª• 'customerCif'
        const percentage = parseFloat(attrParts[1].trim());
        const formattedPercentage = percentage; // ƒê·ªãnh d·∫°ng ph·∫ßn trƒÉm
        // const formattedPercentage = formatPercentage(percentage); // ƒê·ªãnh d·∫°ng ph·∫ßn trƒÉm

        // Thay th·∫ø m√¥ t·∫£ b·∫±ng chu·ªói m·ªõi
        const description = generateDescription(table, field);

        // Th√™m d·ªØ li·ªáu v√†o m·∫£ng t·∫°m
        tempData.push([
          table,
          queryType,
          percentage,
          formattedPercentage,
          description,
        ]);
      });
    }
  }

  // S·∫Øp x·∫øp theo ph·∫ßn trƒÉm t·ª´ cao ƒë·∫øn th·∫•p
  tempData.sort((a, b) => b[2] - a[2]);

  // ƒê·∫©y d·ªØ li·ªáu ƒë√£ s·∫Øp x·∫øp v√†o wsData, b·ªè c·ªôt percentage g·ªëc (ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng)
  tempData.forEach((row) => {
    wsData.push([row[0], row[1], row[3], row[4]]);
  });

  // T·∫°o m·ªôt worksheet t·ª´ d·ªØ li·ªáu
  const ws = XLSX.utils.aoa_to_sheet(wsData);

  // Thi·∫øt l·∫≠p ƒë·ªô r·ªông c·ªôt
  ws["!cols"] = [
    { wch: 20 }, // B·∫£ng
    { wch: 15 }, // C√¢u truy v·∫•n
    { wch: 10 }, // T·ªâ l·ªá %
    { wch: 50 }, // M√¥ t·∫£
  ];

  // Th√™m worksheet v√†o workbook
  XLSX.utils.book_append_sheet(wb, ws, "Data");

  // X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë·ªÉ l∆∞u file
  const fileName = `data_${Date.now()}.xlsx`;
  const filePath = path.join(__dirname, "exports", fileName);

  // ƒê·∫£m b·∫£o th∆∞ m·ª•c 'exports' t·ªìn t·∫°i
  if (!fs.existsSync(path.join(__dirname, "exports"))) {
    fs.mkdirSync(path.join(__dirname, "exports"));
  }

  // Ghi workbook v√†o file
  XLSX.writeFile(wb, filePath);

  console.log(`ƒë√£ ghi file excel ph√¢n t√≠ch th√†nh c√¥ng`);
  if (filePath) {
    return filePath;
  }
  return null;
};

const uploadFileExcell = async (filePathPromise) => {
  try {
    // Ch·ªù ƒë·ªÉ l·∫•y ƒë∆∞·ªùng d·∫´n file n·∫øu filePath l√† m·ªôt Promise
    const filePath = await filePathPromise;
    // console.log("üöÄ ~ uploadFileExcell ~ filePath:", filePath);

    // 2. Upload file sau khi ghi
    const data = new FormData();
    data.append("file", fs.createReadStream(filePath));

    const config = {
      method: "post",
      maxBodyLength: Infinity,
      url: "https://administrator.lifetek.vn:203/api/files/single",
      headers: {
        ...data.getHeaders(),
      },
      data: data,
      httpsAgent: new https.Agent({ rejectUnauthorized: false }),
    };

    const response = await axios.request(config);
    if (response.status === 200) {
      return { success: true, url: response.data.url };
    }
    return { success: false, url: "l·ªói upload" };
  } catch (error) {
    console.error("L·ªói:", error.message);
    return { success: false, url: "l·ªói upload" };
  }
};

const deleteFileIfExists = async (filePath) => {
  try {
    // Ki·ªÉm tra n·∫øu filePath l√† Promise
    if (filePath instanceof Promise) {
      filePath = await filePath; // ƒê·ª£i cho Promise gi·∫£i quy·∫øt v√† l·∫•y gi√° tr·ªã th·ª±c t·∫ø
    }

    // Ki·ªÉm tra file t·ªìn t·∫°i tr∆∞·ªõc khi x√≥a
    if (fs.existsSync(filePath)) {
      await fs.promises.unlink(filePath);
      return true;
    } else {
      console.log(`File kh√¥ng t·ªìn t·∫°i: ${filePath}`);
      return false;
    }
  } catch (error) {
    console.error(`L·ªói khi x√≥a file ${filePath}:`, error.message);
    return false;
  }
};

const importLogData = async (filePath) => {
  try {
    // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu trong b·∫£ng (collection)
    await mongod_log.deleteMany({});
    console.log("ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu trong b·∫£ng.");

    const fileStream = fs.createReadStream(filePath);

    const rl = readline.createInterface({
      input: fileStream,
      crlfDelay: Infinity,
    });

    let batchLogs = [];
    let batchSize = 10000; // K√≠ch th∆∞·ªõc batch

    // ƒê·ªçc t·ª´ng d√≤ng trong file v√† parse n√≥
    console.log("ƒëang chuy·ªÉn h√≥a d·ªØ li·ªáu json...");

    for await (const line of rl) {
      try {
        const log = JSON.parse(line);
        if (log.t && log.t.$date) {
          log.t = new Date(log.t.$date);
        }
        batchLogs.push(log);

        // N·∫øu s·ªë l∆∞·ª£ng b·∫£n ghi trong batch ƒë·∫°t ng∆∞·ª°ng, l∆∞u v√†o DB
        if (batchLogs.length >= batchSize) {
          console.log(`ƒëang insert ${batchLogs.length} b·∫£n ghi d·ªØ li·ªáu...`);
          await mongod_log.insertMany(batchLogs);
          console.log(`ƒê√£ l∆∞u ${batchLogs.length} b·∫£n ghi v√†o c∆° s·ªü d·ªØ li·ªáu. 1`);
          batchLogs = []; // X√≥a batchLogs sau khi l∆∞u
        }
      } catch (error) {
        // X·ª≠ l√Ω l·ªói khi ph√¢n t√≠ch d√≤ng JSON (n·∫øu c·∫ßn)
      }
    }

    // L∆∞u ph·∫ßn c√≤n l·∫°i n·∫øu c√≥
    if (batchLogs.length > 0) {
      console.log(`ƒëang insert ${batchLogs.length} b·∫£n ghi d·ªØ li·ªáu....`);
      await mongod_log.insertMany(batchLogs);
      console.log(`ƒê√£ l∆∞u ${batchLogs.length} b·∫£n ghi v√†o c∆° s·ªü d·ªØ li·ªáu. 2`);
    }

    const count = await mongod_log.countDocuments();
    console.log(`S·ªë b·∫£n ghi sau import: ${count}`);
    return true;
  } catch (error) {
    console.error("L·ªói khi nh·∫≠p d·ªØ li·ªáu:", error.message);
    return false;
  }
};

module.exports = {
  finData,
  resultsTotal,
  resultsQuery,
  msgNsPercentages,
  statistics,
  writeToExcel,
  mongod_log,
  uploadFileExcell,
  deleteFileIfExists,
  importLogData,
};
