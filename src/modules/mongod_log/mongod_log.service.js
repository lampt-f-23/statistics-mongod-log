const mongod_log = require("./mongod_log.model");
const {
  createPipelineMsgCounts,
  createPipelineNsCounts,
  createPipelineStatistics,
  createPipelineResults,
  createPipelineResultsTotal,
} = require("./mognod_log.pipeline");

const finData = async (req) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    const { commandTypes, ns, s, c, ctx, msg } = req.query;
    const filter = {
      ...(commandTypes && { "attr.type": commandTypes }),
      ...(ns && { "attr.ns": ns }),
      ...(s && { s: s }),
      ...(c && { c: c }),
      ...(ctx && { ctx: ctx }),
      ...(msg && { msg: msg }),
    };

    // L·∫•y d·ªØ li·ªáu theo filter
    const data = await mongod_log.mongodLogModel
      .find(filter, "_id")
      .skip(skip)
      .limit(limit)
      .exec();

    if (data.length > 0) {
      return {
        status: true,
        data: data || [],
      };
    }
    return { message: "No data found" };
  } catch (error) {
    console.error("Error in finData:", error);
    return { status: false, error: error.message };
  }
};
/**
 * H√†m t√≠nh to√°n t·ªïng s·ªë l∆∞·ª£ng b·∫£n ghi v√† ph·∫ßn trƒÉm t·ª´ c√°c ƒëi·ªÅu ki·ªán l·ªçc trong log.
 *
 * @param {Object} msgNsPercentages - ƒê·ªëi t∆∞·ª£ng ch·ª©a c√°c t·ªâ l·ªá ph·∫ßn trƒÉm theo message v√† namespace.
 * @returns {Object} - ƒê·ªëi t∆∞·ª£ng ch·ª©a k·∫øt qu·∫£ t·ªïng h·ª£p v·ªõi th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng v√† ph·∫ßn trƒÉm c·ªßa c√°c tr∆∞·ªùng l·ªçc.
 */
const resultsTotal = async (msgNsPercentages) => {
  try {
    // ƒê·∫øm t·ªïng s·ªë b·∫£n ghi trong b·ªô s∆∞u t·∫≠p mongodLog
    const totalRecords = await mongod_log.mongodLogModel.countDocuments();
    const totalResult = {}; // ƒê·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u tr·ªØ k·∫øt qu·∫£ t·ªïng h·ª£p

    // Duy·ªát qua t·ª´ng namespace trong msgNsPercentages
    for (const ns in msgNsPercentages.nsPercentages) {
      totalResult[ns] = {}; // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng cho t·ª´ng namespace

      // Duy·ªát qua t·ª´ng message trong msgPercentages
      for (const msg in msgNsPercentages.msgPercentages) {
        // T·∫°o pipeline cho vi·ªác truy v·∫•n
        const pipeline = createPipelineResultsTotal(msg, ns);
        // Th·ª±c hi·ªán truy v·∫•n aggregate theo pipeline
        const results = await mongod_log.mongodLogModel.aggregate(pipeline);
        console.log("üöÄ ~ resultsTotal ~ results:", results)
        // L·∫•y k·∫øt qu·∫£ ƒë·∫ßu ti√™n n·∫øu c√≥, n·∫øu kh√¥ng th√¨ kh·ªüi t·∫°o gi√° tr·ªã m·∫∑c ƒë·ªãnh
        const response =
          results.length > 0
            ? results[0]
            : { totalRecords: 0, filterFields: {} };
        const formattedResult = []; // M·∫£ng ƒë·ªÉ l∆∞u tr·ªØ k·∫øt qu·∫£ ƒë√£ ƒë·ªãnh d·∫°ng

        // H√†m ƒë·ªÉ t√≠nh ph·∫ßn trƒÉm tr√™n t·ªïng s·ªë b·∫£n ghi
        const percentageOnTotalRecords = (count) =>
          ((count / totalRecords) * 100).toFixed(6);

        // Ki·ªÉm tra n·∫øu filterFields t·ªìn t·∫°i v√† l√† m·ªôt ƒë·ªëi t∆∞·ª£ng
        if (
          response.filterFields &&
          typeof response.filterFields === "object"
        ) {
          // Duy·ªát qua t·ª´ng tr∆∞·ªùng trong filterFields
          for (const [key, value] of Object.entries(response.filterFields)) {
            if (value !== undefined && value !== null) {
              // ƒê·ªãnh d·∫°ng chi ti·∫øt cho tr∆∞·ªùng l·ªçc
              const detailedFilter = formatFilterField(key, value);

              if (detailedFilter) {
                // ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ theo y√™u c·∫ßu
                formattedResult.push({
                  attr: `${key} : ${percentageOnTotalRecords(value.count)}%`, // T·∫°o chu·ªói hi·ªÉn th·ªã ph·∫ßn trƒÉm
                  value, // D·ªØ li·ªáu trong $or ho·∫∑c $and
                });
              }
            }
          }
        }

        // N·∫øu c√≥ k·∫øt qu·∫£ ƒë√£ ƒë·ªãnh d·∫°ng, l∆∞u v√†o totalResult
        if (formattedResult.length > 0) {
          totalResult[ns][msg] = formattedResult;
        }
      }
    }

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ªïng h·ª£p
    return totalResult;
  } catch (error) {
    // X·ª≠ l√Ω l·ªói v√† tr·∫£ v·ªÅ th√¥ng b√°o l·ªói
    console.error("Error in resultsTotal:", error);
    return { status: false, error: error.message };
  }
};

// H√†m ƒë·ªÉ duy·ªát qua t·∫•t c·∫£ c√°c tr∆∞·ªùng v√† ph·∫ßn t·ª≠ c·ªßa $and, $or v√† hi·ªÉn th·ªã to√†n b·ªô
const formatFilterField = (key, value) => {
  if (value === undefined || value === null) {
    return null; // B·ªè qua n·∫øu gi√° tr·ªã kh√¥ng h·ª£p l·ªá
  }

  if (typeof value === "object" && value !== null) {
    // Ki·ªÉm tra v√† x·ª≠ l√Ω c√°c ƒëi·ªÅu ki·ªán $and v√† $or
    if (value.$and) {
      return `$and: [${value.$and
        .map((condition) =>
          formatFilterField(
            Object.keys(condition)[0],
            condition[Object.keys(condition)[0]]
          )
        )
        .join(", ")}]`;
    } else if (value.$or) {
      return `$or: [${value.$or
        .map((condition) =>
          formatFilterField(
            Object.keys(condition)[0],
            condition[Object.keys(condition)[0]]
          )
        )
        .join(", ")}]`;
    } else {
      // N·∫øu l√† m·ªôt tr∆∞·ªùng th√¥ng th∆∞·ªùng
      return `${key}: ${JSON.stringify(value)}`;
    }
  } else {
    // N·∫øu gi√° tr·ªã l√† ƒë∆°n gi·∫£n (string, number, v.v.)
    return `${key}: ${value}`;
  }
};

const resultsQuery = async (req) => {
  try {
    const { ns, msg } = req.query;

    const results = await mongod_log.mongodLogModel.aggregate(
      createPipelineResults(msg, ns)
    );
    const count = await mongod_log.mongodLogModel.countDocuments();

    const response =
      results.length > 0
        ? results[0]
        : { totalCodes: 0, totalRecords: 0, percentage: 0 };

    const percentageOnTotalRecords = (response.totalCodes / count) * 100;

    return {
      msg: `k·∫øt qu·∫£ c·ªßa ${msg} t·ª´ ${ns} c√≥ filter.code l√† : ${
        response.totalCodes
      } chi·∫øn: ${percentageOnTotalRecords.toFixed(
        2
      )}% trong t·ªïng s·ªë ${count} b·∫£n ghi`,
      // results_response: response,
      percentageOnTotalRecords: {
        formattedTotalRecords_vi: `${percentageOnTotalRecords.toFixed(2)} %`,
        totalRecordsPercentage: percentageOnTotalRecords,
        totalCodes: response.totalCodes,
        totalRecords: count,
      },
    };
  } catch (error) {
    console.error("Error in finData:", error);
    return { status: false, error: error.message };
  }
};
const msgNsPercentages = async (req) => {
  try {
    // l·∫•y t·ªïng s·ªë b·∫£n ghi
    const totalRecords = await mongod_log.mongodLogModel.countDocuments();
    //  l·∫•y d·ªØ li·ªáu msg ns theo pipeline
    const [msgCounts, nsCounts] = await Promise.all([
      mongod_log.mongodLogModel
        .aggregate(createPipelineMsgCounts(totalRecords))
        .exec(),
      mongod_log.mongodLogModel
        .aggregate(createPipelineNsCounts(totalRecords))
        .exec(),
    ]);

    const nsPercentages = nsCounts.reduce((acc, item) => {
      const percentage = item.percentage.toFixed(2);
      let codeInfo = "";

      if (item.codes.length > 0) {
        codeInfo = `codes: ${item.codes.length}`;
      } else {
        codeInfo = "codes: 0";
      }
      acc[item.ns] = `${percentage}% , ${codeInfo}`;
      return acc;
    }, {});

    const msgPercentages = msgCounts.reduce((acc, item) => {
      acc[`${item.msg}`] = `${item.percentage.toFixed(2)}%`;
      return acc;
    }, {});

    return {
      msgPercentages,
      nsPercentages,
    };
  } catch (error) {
    console.error("Error in finData:", error);
    return { status: false, error: error.message };
  }
};
const statistics = async (req) => {
  try {
    // L·∫•y th√¥ng tin v·ªÅ c√°c lo·∫°i l·ªánh v√† collection duy nh·∫•t
    const uniqueInfo = await mongod_log.mongodLogModel
      .aggregate(createPipelineStatistics())
      .exec();

    // ƒê·∫øm s·ªë l∆∞·ª£ng b·∫£n ghi cho commandTypes
    const commanTypes = await mongod_log.mongodLogModel.countDocuments({
      "attr.type": req.query.commandTypes || 0,
    });

    return {
      statistics: {
        ...uniqueInfo[0],
        commanTypes,
      },
    };
  } catch (error) {
    console.error("Error in finData:", error);
    return { status: false, error: error.message };
  }
};

module.exports = {
  finData,
  resultsTotal,
  resultsQuery,
  msgNsPercentages,
  statistics,
};
